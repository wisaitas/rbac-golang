version: "3.9"

services:
  auth-service:
    build:
      context: .
      dockerfile: deployment/docker-images/auth-service/api.Dockerfile
    container_name: rbac-golang-auth-service
    ports:
      - 8082:8082
    env_file:
      - deployment/env/api.env
    depends_on:
      auth-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/healthz"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s

  auth-db:
    build:
      context: .
      dockerfile: deployment/docker-images/auth-db/postgres.Dockerfile
    container_name: rbac-golang-auth-db
    ports:
      - 8080:5432
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 30s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7.4.1-alpine
    container_name: rbac-golang-redis
    ports:
      - 8081:6379
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 30s
      timeout: 5s
      retries: 5
  # sonarqube:
  #   image: sonarqube:9.9-community
  #   container_name: rbac-golang-sonarqube
  #   ports:
  #     - 9000:9000
  #   depends_on:
  #     sonarqube-db:
  #       condition: service_healthy
  #   environment:
  #     - SONAR_JDBC_URL=jdbc:postgresql://sonarqube-db:5432/postgres
  #     - SONAR_JDBC_USERNAME=postgres
  #     - SONAR_JDBC_PASSWORD=sonar
  #   volumes:
  #     - sonarqube-data:/opt/sonarqube/data
  #     - sonarqube-extensions:/opt/sonarqube/extensions
  #     - sonarqube-logs:/opt/sonarqube/logs
  # sonarqube-db:
  #   image: postgres:17
  #   container_name: rbac-golang-sonarqube-db
  #   ports:
  #     - 5432:5432
  #   environment:
  #     - POSTGRES_PASSWORD=sonar
  #   volumes:
  #     - sonarqube-db-data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
  #     interval: 30s
  #     timeout: 5s
  #     retries: 5
  # sonar-scanner:
  #   image: sonarsource/sonar-scanner-cli:11
  #   container_name: rbac-golang-sonar-scanner
  #   depends_on:
  #     - sonarqube
  #   volumes:
  #     - ./:/usr/src
  #   working_dir: /usr/src
  #   environment:
  #     - SONAR_HOST_URL=http://sonarqube:9000
  #     - SONAR_TOKEN=sqa_cb4e2285569430c0744e28c6ad455f37d6f759be
  #   command: >
  #     sonar-scanner
  #     -Dsonar.projectKey=rbac-golang-auth-service
  #     -Dsonar.projectName="RBAC Golang Auth Service"
  #     -Dsonar.sources=.
  #     -Dsonar.exclusions=**/*_test.go,**/vendor/**,**/testdata/**
  #     -Dsonar.tests=.
  #     -Dsonar.test.inclusions=**/*_test.go
  #     -Dsonar.go.coverage.reportPaths=coverage.out
  trivy:
    image: aquasec/trivy:0.61.0
    container_name: rbac-golang-trivy
    volumes:
      - ./:/app
    command: >
      filesystem
      --severity HIGH,CRITICAL
      --format table
      --output /app/trivy-report.txt
      /app
    depends_on:
      - auth-service

volumes:
  auth-db-data:
  redis-data:
  sonarqube-db-data:
  sonarqube-data:
  sonarqube-extensions:
  sonarqube-logs:
